#coding=utf-8
from django.http.response import HttpResponse
from django.shortcuts import render
from control.dscrapy_control import JobControl, TargetControl, QueueControl, TaskControl, LogControl, NodeControl
from app.models import Targets, Queue
from datetime import datetime
from web.constant.dscrapy_constant import DescrapyConstant
from web.utils.egg_uploader import EggUploader

def include(request):
    return render(request, 'include.html')
def index(request):
#     client_list = Redis.client_list()
    context          = {}
    context['hello'] = 'Hello World!'
#     context['client'] = client_list[0]
    return render(request, 'index.html', context)

def welcome(request):
#     client_list = Redis.client_list()
    context          = {}
    context['hello'] = 'Hello World!'
#     context['client'] = client_list[0]
    return render(request, 'welcome.html', context)

def list_targets(request):
    context = {}
    tc = TargetControl()
    all_targets = tc.get_all_targets()
    context['result'] = all_targets
    return render(request, 'targets_list.html', context)

def del_target(request):
    target_id = request.GET['target_id']
    tc = TargetControl()
    result = tc.del_targets(target_id)  #返回删除记录条数
    return HttpResponse('删除成功')
def to_add_target(request):
    context = {}
    return render(request, 'target_add.html', context)

#添加targets
def add_target(request):
    context = {}
    targets = []
    target = Targets()
    host_ip = request.GET['host_ip']
    project_name = request.GET['project_name']
    target.host_ip = host_ip
    target.host_port = DescrapyConstant.DEFAULT_DSCRAPY_SERVER_PORT
    target.project_name = project_name
    target.target_name = host_ip + "-" + project_name
    target.status = 0
    target.deleted = 0
    target.create_time = datetime.now()
    targets.append(target)
    tc = TargetControl()
    tc.add_targets(targets)
    context['message'] = '添加成功!'
    return render(request, 'target_add.html', context)

def deploy_targets(request):
    context = {}
    project_name = request.POST['project_name']
    settings = request.POST['settings']
    host_ip = request.POST['host_ip']
    project_egg_file = request.FILES.get('project_egg')
    if not project_egg_file:
        context['message'] = '文件不能为空!'
        return render(request, 'targets_list.html', context)
    project_egg_version = project_egg_file.name.split(".")[0]
    eu = EggUploader(project_egg_file)
    file_name = eu.upload()
    if not file_name:
        context['message'] = '文件上传失败!'
        return render(request, 'targets_list.html', context)
    host_port = DescrapyConstant.DEFAULT_DSCRAPY_SERVER_PORT
    tc = TargetControl()
    result_json = tc.deploy_targets(project_name, settings, host_ip, host_port, file_name, project_egg_version)
    tc = TargetControl()
    all_targets = tc.get_all_targets()
    context['result'] = all_targets
    update_params = []
    if result_json and len(result_json) > 0:
        server_info = ""
        for target_info in result_json:
            param = {}
            param['target_id'] = target_info['target_id']
            param['target_status'] = 1
            update_params.append(param)
            server_info += target_info['host_ip'] + "\t"
        success_message = "成功部署%s个target，分别位于(%s)服务器上" %(len(result_json), server_info)
        context['message'] = '部署成功[%s]!' %success_message
    else:
        context['message'] = '部署失败[%s]!' %result_json
    tc.update_targets_status(update_params)
    return render(request, 'targets_list.html', context)

def ajax_deploy_targets(request):
    project_name = request.GET['project_name']
    settings = request.GET['settings']
    host_ip = request.GET['host_ip']
    host_port = DescrapyConstant.DEFAULT_DSCRAPY_SERVER_PORT
    tc = TargetControl()
    result_json = tc.deploy_targets(project_name, settings, host_ip, host_port)
    result_message = ""
    if result_json and len(result_json) > 0:
        server_info = ""
        for target_info in result_json:
            server_info += target_info['host_ip'] + "\t"
        success_message = "成功部署%s个target，分别位于(%s)服务器上" %(len(result_json), server_info)
        result_message = '部署成功[%s]!' %success_message
    else:
        result_message = '部署失败[%s]!' %result_json
    return HttpResponse(result_message)

def list_all_queues(request):
    context = {}
    qc = QueueControl()
    result =  qc.list_queues()
    context['result'] = result
    return render(request, 'queues_list.html', context)

def to_add_queue(request):
    context = {}
    return render(request, 'queue_add.html', context)

def add_queue(request):
    context = {}
    queue = Queue()
    queue_name = request.GET['queue_name']
    spider_name = request.GET['spider_name']
    queue_ip = request.GET['queue_ip']
    queue_db = request.GET['queue_db']
    queue_describ = request.GET['queue_describ']
    queue.queue_name = queue_name
    queue.spider_name = spider_name
    queue.queue_ip = queue_ip
    queue.queue_port = DescrapyConstant.DEFAULT_DSCRAPY_REDIS_PORT
    queue.queue_db = queue_db
    queue.queue_describ = queue_describ
    queue.create_time = datetime.now()
    qc = QueueControl()
    if qc.add_queue(queue):
        context['message'] = "添加成功!"
    else:
        context['message'] = "添加失败!"
    return render(request, 'queue_add.html', context)

def to_add_tasks(request):
    context = {}
    queue_id = request.GET['queue_id']
    qc = QueueControl()
    queue = qc.get_queue_by_id(int(queue_id))
    context['result'] = queue
    return render(request, 'tasks_add.html', context)

#添加普通任务
def add_normal_tasks(request):
    queue_id = request.GET['queue_id']
    queue_ip = request.GET['queue_ip']
    queue_port = DescrapyConstant.DEFAULT_DSCRAPY_REDIS_PORT
    queue_name = request.GET['queue_name']
    queue_db = request.GET['queue_db']
    tasks = request.GET['tasks']
    params = {'host_ip': queue_ip, 'host_port': queue_port, 'db':queue_db, 'key':queue_name, 'tasks':tasks}
    tc = TaskControl()
    tc.add_normal_tasks(params)
    
    context = {}
    qc = QueueControl()
    queue = qc.get_queue_by_id(int(queue_id))
    context['result'] = queue
    context['message'] = '提交成功!'
    return render(request, 'tasks_add.html', context)

#添加带有优先级任务
def add_priority_tasks(request):
    return HttpResponse("<p>提交成功!</p>")

#删除任务
def del_tasks(request):
    tasks = request.GET['tasks']
    return HttpResponse("<p>提交成功!</p>")

#清空所给队列的所有任务
def clear_tasks(request):
    queue = request.GET['queue']
    return HttpResponse("<p>提交成功!</p>")

#克隆job, 可以动态加载settings TODO
def clone_job(request):
    project = request.GET['project']
    spider = request.GET['spider']
    host_ip = request.GET['host_ip']
    host_port = DescrapyConstant.DEFAULT_DSCRAPY_SERVER_PORT
    params = {'project':project, 'spider':spider, 'host_ip':host_ip, 'host_port':host_port}
    jc = JobControl()
    result = jc.start_jobs(params)
    return HttpResponse("<p>克隆成功</p>")

def to_add_job(request):
    context = {}
    return render(request, 'job_add.html', context)

#新增job, 可以动态加载settings TODO
def add_jobs(request):
    context = {}
    project = request.GET['project_name']
    spider = request.GET['spider_name']
    host_ip = request.GET['host_ip']
    host_port = DescrapyConstant.DEFAULT_DSCRAPY_SERVER_PORT
    params = {'project':project, 'spider':spider, 'host_ip':host_ip, 'host_port':host_port}
    jc = JobControl()
    result_json = jc.start_jobs(params)
    print "result_json: ", result_json
    if result_json and len(result_json) > 0:
        server_info = ""
        for target_info in result_json:
            server_info += target_info['host_ip'] + "\t"
        success_message = "成功运行%s个target，分别位于(%s)服务器上" %(len(result_json), server_info)
        context['message'] = '运行成功[%s]!' %success_message
    else:
        context['message'] = '运行失败[%s]!' %result_json
    return render(request, 'job_add.html', context)

#取消job
def cancel_job(request):
    project = request.GET['project']
    job_id = request.GET['job_id']
    host_ip = request.GET['host_ip']
    host_port = DescrapyConstant.DEFAULT_DSCRAPY_SERVER_PORT
    params = {'project':project, 'job_id':job_id, 'host_ip':host_ip, 'host_port':host_port}
    jc = JobControl()
    result = jc.cancel_jobs(params)
    return HttpResponse("<p>" + result + "</p>")
    
#list job   
def list_jobs(request):
    context = {}
    project = request.GET['project']
    host_ip = request.GET['host_ip']
    host_port = DescrapyConstant.DEFAULT_DSCRAPY_SERVER_PORT
    params = {'project':project, 'host_ip':host_ip, 'host_port':host_port}
    jc = JobControl()
    result = jc.list_jobs(params)
    context['result'] = result
    return render(request, 'jobs_list.html', context)

def list_all_jobs(request):
    context = {}
    jc = JobControl()
    result = jc.list_all_jobs()
    context['result'] = result
    return render(request, 'jobs_list.html', context)

def find_log(request):
    project = request.GET['project']
    spider_name = request.GET['spider_name']
    host = request.GET['host_ip']
    job_id = request.GET['job_id']
    lc = LogControl()
    result = lc.findLog(project, spider_name, host, DescrapyConstant.DEFAULT_DSCRAPY_SERVER_PORT, job_id)
    result = result.replace("\n", "<br>")
    return HttpResponse("<p>" + result + "</p>")

def list_nodes(request):
    context = {}
    nc = NodeControl()
    nodes = nc.getNodesList()
    context['result'] = nodes
    print nodes
    return render(request, 'nodes_list.html', context)







