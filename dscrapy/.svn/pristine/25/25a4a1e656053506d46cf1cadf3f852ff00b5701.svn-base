#coding=utf8
'''
@author: zhangy
'''
import paramiko
from web.constant.dscrapy_constant import DescrapyConstant
from web.dto.result_json import ResultJson

class LinuxClient():
    def __init__(self):
        self.ssh = paramiko.SSHClient()
        self.ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    
    def connect(self, host="127.0.0.1", user_name="", password="", port=22):
        try:
            self.ssh.connect(hostname=host, port=port, username=user_name, password=password)
            return True
        except Exception as e:
            print "连接失败, %s" %e
        return False
    
    def doCmd(self, cmd):
        try:
            stdin, stdout, stderr = self.ssh.exec_command(cmd)
            result = stdout.read().decode()
            return result if result else stderr.read().decode()
        except Exception as e:
            print "出错啦, ", e
        finally:
            self._close()
    
    def watch_memery(self):
        result_json = ResultJson()
        data = self.doCmd(DescrapyConstant.WATCH_MEMERY_CMD)
        if data:
            result_json.set_status_code(ResultJson.STATUS_CODE_SUCCESS)
            result_json.set_data(data)
        else:
            result_json.set_status_code(ResultJson.STATUS_CODE_FAIL)
        return result_json
    def watch_disk(self):
        result_json = ResultJson()
        data = self.doCmd(DescrapyConstant.WATCH_DISK_CMD)
        if data:
            result_json.set_status_code(ResultJson.STATUS_CODE_SUCCESS)
            result_json.set_data(data)
        else:
            result_json.set_status_code(ResultJson.STATUS_CODE_FAIL)
        return result_json
#         result_json = ResultJson()
#         result = self.doCmd(DescrapyConstant.WATCH_DISK_CMD)
#         lines = result.split("\n")
#         if len(lines) > 1:
#             disk_line = lines[1]
#             disk_result = disk_line.replace(" ", "|")
#             disk_reults = disk_result.split("|")
#             results = []
#             data = {}
#             for disk in disk_reults:
#                 if disk:
#                     if not "/" in disk:
#                         results.append(disk)
#             data['total'] = results[0] if len(results) > 0 else "unknow"
#             data['used'] = results[1] if len(results) > 1 else "unknow"
#             data['free'] = results[2] if len(results) > 2 else "unknow"
#             data['used_percent'] = results[3] if len(results) > 3 else "unknow"
#             result_json.set_status_code(ResultJson.STATUS_CODE_SUCCESS)
#             result_json.set_data(data)
#             return result_json
#         result_json.set_status_code(ResultJson.STATUS_CODE_FAIL)
#         return result_json
            
    
    def watch_cpu(self):
        result_json = ResultJson()
        data = self.doCmd(DescrapyConstant.WATCH_CPU_CMD)
        if data:
            result_json.set_status_code(ResultJson.STATUS_CODE_SUCCESS)
            result_json.set_data(data)
        else:
            result_json.set_status_code(ResultJson.STATUS_CODE_FAIL)
        return result_json
    
    def _close(self):
        self.ssh.close()


if __name__ == "__main__":
    client = LinuxClient()
    client.connect("123.59.117.172", "huaw111", "huaw@123")
    result = client.doCmd("df -hl")
    print result
 





